%matplotlib inline
from scipy.special import ellipk, ellipe, ellipkm1
from numpy import pi, sqrt, linspace
from pylab import plot, xlabel, ylabel, suptitle, legend, show
import numpy as np
n=10
d=12.5*10**-3
uo =n* 4E-3*pi     # Permeability constant - units of H/m
Bo = lambda i, a, u=uo: i*u/2./a    # Central field = f(current, loop radius, perm. constant)
al = lambda r, a: r/a               # Alpha = f(radius of measurement point, radius of loop)
be = lambda x, a: x/a               # Beta = f(axial distance to meas. point, radius of loop)
ga = lambda x, r: x/r               # Gamma = f(axial distance, radius to meas. point)
Q = lambda r, x, a: (1 + al(r,a))**2 + be(x,a)**2   # Q = f(radius, distance to meas. point, loop radius)
k = lambda r, x, a: sqrt(4*al(r,a)/Q(r,x,a))       # k = f(radius, distance to meas. point, loop radius)
K = lambda k: ellipk(k**2.0)          # Elliptic integral, first kind, as a function of k
E = lambda k: ellipe(k**2.0)          # Elliptic integral, second kind, as a function of k
# On-Axis field = f(current and radius of loop, x of measurement point)
def Baxial(i, a, x, u=uo):
    if a == 0:
        if x == 0:
            return NaN
        else:
            return 0.0
    else:
        return (u*i*a**2)/2.0/(a**2 + x**2)**(1.5)

# Axial field component = f(current and radius of loop, r and x of meas. point)
def Bx(i, a, x, r):
    if r == 0:
        if x == 0:
            return Bo(i,a)         
        else:
            return Baxial(i,a,x)   
    else:                         
        return Bo(i,a)*\
            (E(k(r,x,a))*((1.0-al(r,a)**2-be(x,a)**2)/(Q(r,x,a)-4*al(r,a))) + K(k(r,x,a)))\
            /pi/sqrt(Q(r,x,a))
        
# Radial field component = f(current and radius of loop, r and x of meas. point)
def Br(i, a, x, r):
    if r == 0:
        return 0                  
    else:                          
        return Bo(i,a)*ga(x,r)*\
            (E(k(r,x,a))*((1.0+al(r,a)**2+be(x,a)**2)/(Q(r,x,a)-4*al(r,a))) - K(k(r,x,a)))\
            /pi/sqrt(Q(r,x,a))
def btotax(i,a,x,u=uo):
    return Baxial(i, a, x-a/2, u=uo)+Baxial(i, a, x+a/2, u=uo)
def btotx(i, a, x, r):
    return Bx(i, a, x-a/2, r)+Bx(i, a, x+a/2, r)
def brtot(i, a, x, r):
    return Br(i, a, x-a/2, r)+Br(i, a, x+a/2, r)
def brtot_cartesian(i, a, x, y, z):
    r = np.sqrt(x**2 + y**2 + z**2)  
    
    # Calculate the radial and axial field components
    br = brtot(i, a, x, r)   
    bx = btotx(i, a, x, r)  

    # Convert to Cartesian coordinates using x, y, and r
    bxcar = bx       
    bycar = br * y / r       
    bzcar = br * z / r               

    return bxcar, bycar, bzcar
plt.rc('text', usetex=True)
plt.rc('font', family='times new roman')
# Constants
i = 6.8  
a = 0.025 
circle_radius = 18.5e-3 

# Create grid for x and y values (since we are considering the xy-plane)
x_vals = np.linspace(-0.05, 0.05, 100)  
y_vals = np.linspace(-0.05, 0.05, 100)  

# Create grid for z values (for YZ-plane, we will consider z)
z_vals = np.linspace(-0.05, 0.05, 100)  

# Create meshgrid for the coordinates (we set z = 0 for the xy-plane)
X, Y = np.meshgrid(x_vals, y_vals)

# Create meshgrid for YZ-plane (consider X = 0)
Y_grid, Z_grid = np.meshgrid(y_vals, z_vals)

# Compute the magnetic field components in Cartesian coordinates in the xy-plane
BX, BY, BZ = np.vectorize(brtot_cartesian)(i, a, X, Y, 0)

# Compute the magnetic field components for the YZ-plane (consider X = 0)
BX_yz, BY_yz, BZ_yz = np.vectorize(brtot_cartesian)(i, a, 0.002, Y_grid, Z_grid)

# Calculate the magnetic field magnitude for both planes
B_mag_xy = np.sqrt(BX**2 + BY**2 + BZ**2)
B_mag_yz = np.sqrt(BX_yz**2 + BY_yz**2 + BZ_yz**2)

# Clip the magnetic field magnitudes to a maximum value of 30 for both planes
B_mag_xy = np.clip(B_mag_xy, None, 31)
B_mag_yz = np.clip(B_mag_yz, None, 31)

# Create subplots for XY-plane and YZ-plane
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
plt.rc('text', usetex=True)
plt.rc('font', family='times new roman')
# XY-plane density map and streamplot
c1 = ax1.contourf(X*10**3, Y*10**3, B_mag_xy, cmap='viridis', shading='auto')
strm1 = ax1.streamplot(X*10**3, Y*10**3, BX, BY, color='r', linewidth=1)
ax1.set_xlabel('Y (mm)',fontsize=24)
ax1.set_ylabel('X (mm)',fontsize=24)
ax1.set_title('(a)',fontsize=24)

# Add circle to XY-plane (18.5 mm radius) at the center (0, 0)
circle1 = plt.Circle((0, 0), circle_radius*10**3, color='blue', fill=False, linewidth=2)
ax1.add_artist(circle1)

# YZ-plane density map and streamplot
c2 = ax2.contourf(Y_grid*10**3, Z_grid*10**3, B_mag_yz, cmap='viridis', shading='auto',fontsize=24)
# fig.colorbar(c2, ax=ax2, label='Magnetic Field Strength (G)',ticks=np.arange(0, 32, 5))
strm2 = ax2.streamplot(Y_grid*10**3, Z_grid*10**3, BY_yz, BZ_yz, color='r', linewidth=1)
ax2.set_xlabel('X (mm)',fontsize=24)
ax2.set_ylabel('Z (mm)',fontsize=24)
ax2.set_title('(b)',fontsize=24)
ax1.tick_params(axis='both', which='major', labelsize=20)
ax2.tick_params(axis='both', which='major', labelsize=20)
# Add circle to YZ-plane (18.5 mm radius) at the center (0, 0)
circle2 = plt.Circle((0, 0), circle_radius*10**3, color='blue', fill=False, linewidth=2)
ax2.add_artist(circle2)
fig.colorbar(c1, ax=ax1, label='Magnetic Field Strength (G)', ticks=np.arange(0, 32, 5)).ax.tick_params(labelsize=18)
fig.colorbar(c2, ax=ax2, label='Magnetic Field Strength (G)', ticks=np.arange(0, 32, 5)).ax.tick_params(labelsize=18)

# Show the plots
plt.tight_layout()
plt.show()

